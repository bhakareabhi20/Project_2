* This Java program calculates the nth Fibonacci number using two different approaches: a recursive approach and a non-recursive approach. It takes user input to choose between these methods and allows the user to exit the program. Here's an explanation of the code line by line:

java

import java.util.Arrays;
import java.util.Scanner;

    * These lines import necessary classes. java.util.Arrays is imported to use the fill method for initializing an array, and java.util.Scanner is imported to take user input.

java

public class Fibonacci {

  *  This line defines the class named Fibonacci.

java

public static void main(String[] args) {

 *   This line defines the main method, which is the entry point of the program.

java

// TODO Auto-generated method stub

    This is a comment generated by the IDE, and it typically indicates a placeholder for future code implementation.

java

Scanner in = new Scanner(System.in);

 *   This line creates a Scanner object named in to read input from the console.

java

System.out.println("Enter a number : ");
int n = in.nextInt();

 *   These lines prompt the user to enter a number and then read an integer from the user, which is stored in the variable n.

java

while (true) {

  *  This starts an infinite loop, which will continue until explicitly exited by the user.

java

System.out.println("Enter your choice: ");
System.out.println(" 1. Recursive approach.");
System.out.println(" 2. Non-recursive approach.");
System.out.println(" 3. Exit.");
int ch = in.nextInt();

    These lines prompt the user to choose one of the options by displaying a menu and read their choice into the variable ch.

java

switch (ch) {

    This line begins a switch statement based on the value of ch.

java

case 1:

    If the user chooses option 1 (recursive approach), the program executes the following block of code.

java

System.out.println(fiboRec(n));

    This line calls the fiboRec method with the value of n and prints the result. The fiboRec method calculates the Fibonacci number using a recursive approach.

java

break;

    The break statement is used to exit the switch statement.

java

case 2:

    If the user chooses option 2 (non-recursive approach), the program executes the following block of code.

java

System.out.println(fiboNRec(n));

    This line calls the fiboNRec method with the value of n and prints the result. The fiboNRec method calculates the Fibonacci number using a non-recursive approach.

java

break;

    The break statement is used to exit the switch statement.

java

case 3:

    If the user chooses option 3 (Exit), the program executes the following block of code.

java

System.out.println("Thank you!");
return;

    This line prints a thank you message and then exits the program using the return statement.

java

}

    The switch statement is closed here.

java

}

    The while loop continues until the user chooses to exit the program.

java

public static long fiboRec(int n) {

    This line defines a method named fiboRec for calculating the nth Fibonacci number using a recursive approach. It takes an integer n as an argument.

java

if (n <= 1) {
return n;
} else {
return fiboRec(n - 1) + fiboRec(n - 2);
}

    This method uses recursion to calculate the Fibonacci number. If n is 0 or 1, it returns n. Otherwise, it recursively calls itself for n-1 and n-2, and returns the sum of those results.

java

}

  *  The fiboRec method is closed here.

java

public static long fiboNRec(int n) {

  *  This line defines a method named fiboNRec for calculating the nth Fibonacci number using a non-recursive approach. It takes an integer n as an argument.

java

int dp[] = new int[n + 1];
Arrays.fill(dp, -1);

  *  These lines create an integer array dp to store previously calculated Fibonacci numbers and initializes it with -1.

java

int prev2 = 0;
int prev1 = 1;

  *  These lines initialize two variables, prev2 and prev1, to keep track of the previous two Fibonacci numbers.

java

for (int i = 2; i <= n; i++) {

   * This line starts a loop from i = 2 up to n to calculate the Fibonacci number iteratively.

java

int curr = prev1 + prev2;
prev2 = prev1;
prev1 = curr;

  *  These lines update curr with the sum of the previous two Fibonacci numbers (prev1 and prev2), and then update prev2 and prev1 accordingly.

java

}

  *  The loop for the non-recursive approach is closed here.

java

return prev1;

  *  The method returns the final value of prev1, which is the nth Fibonacci number calculated using the non-recursive approach.

java

}

   * The fiboNRec method is closed here.

The program provides a menu for the user to choose between a recursive and a non-recursive approach to calculate the nth Fibonacci number and continues until the user chooses to exit.