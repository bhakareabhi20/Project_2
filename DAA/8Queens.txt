/**************************************8 Queens*************************/

import java.util.Scanner;

public class Queens {
    public static void main(String[] args) {
Scanner sc = new Scanner(System.in);
System.out.print("Enter the number of Queens : ");      
  int n = sc.nextInt(); // The size of the chessboard (8x8 in this case)
        int[][] board = new int[n][n];

        if (solveNQueens(board, 0)) {
            printBoard(board);
        } else {
            System.out.println("No solution exists.");
        }
    }

    // Function to print the chessboard
    public static void printBoard(int[][] board) {
        for (int[] row : board) {
            for (int cell : row) {
                if (cell == 1) {
                    System.out.print("Q ");
                } else {
                    System.out.print("_ ");
                }
            }
            System.out.println();
        }
    }

    // Function to check if it's safe to place a queen in a given cell
    public static boolean isSafe(int[][] board, int row, int col) {
        int i, j;

        // Check this row on the left side
        for (i = 0; i < col; i++) {
            if (board[row][i] == 1) {
                return false;
            }
        }

        // Check upper diagonal on the left side
        for (i = row, j = col; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 1) {
                return false;
            }
        }

        // Check lower diagonal on the left side
        for (i = row, j = col; i < board.length && j >= 0; i++, j--) {
            if (board[i][j] == 1) {
                return false;
            }
        }

        return true;
    }

    // Backtracking function to solve the N-Queens problem
    public static boolean solveNQueens(int[][] board, int col) {
        if (col >= board.length) {
            return true; // All queens are placed
        }

        for (int i = 0; i < board.length; i++) {
            if (isSafe(board, i, col)) {
                board[i][col] = 1; // Place queen

                if (solveNQueens(board, col + 1)) {
                    return true;
                }

                board[i][col] = 0; // If placing queen at board[i][col] doesn't lead to a solution, backtrack
            }
        }
        return false; // If the queen cannot be placed in any row in this column
    }
}

/*
java -cp /tmp/Uyid0v98Ku Queens
Enter the number of Queens : 8
Q _ _ _ _ _ _ _ 
_ _ _ _ _ _ Q _ 
_ _ _ _ Q _ _ _ 
_ _ _ _ _ _ _ Q 
_ Q _ _ _ _ _ _ 
_ _ _ Q _ _ _ _ 
_ _ _ _ _ Q _ _ 
_ _ Q _ _ _ _ _ 

*/
